import { UAProxy, ITask, ITaskSolution } from "../capmonster";
export declare class HCaptchaTask extends UAProxy {
    constructor(clientKey: string);
    createTask: (websiteUrl: string, websiteKey: string, isInvisible?: boolean, customData?: string, cookies?: string | Array<unknown> | object, noCache?: boolean) => Promise<number>;
    task: (task: Omit<IHCaptchaTaskRequest, "type">) => Omit<IHCaptchaTaskRequest, "type">;
    createWithTask: (task: Omit<IHCaptchaTaskRequest, "type">) => Promise<number>;
    getTaskResult: (taskId: number) => Promise<IHCaptchaTaskResponse | null>;
    joinTaskResult: (taskId: number, timeout?: number) => Promise<IHCaptchaTaskResponse>;
}
interface IHCaptchaTaskRequest extends ITask {
    type: "HCaptchaTask" | "HCaptchaTaskProxyless";
    websiteURL: string;
    websiteKey: string;
    isInvisible?: boolean;
    data?: string;
    cookies?: string;
    noCache?: boolean;
}
interface IHCaptchaTaskResponse extends ITaskSolution {
    gRecaptchaResponse: string;
    respKey: string;
    userAgent: string;
}
export {};
//# sourceMappingURL=hcaptcha.d.ts.map