import { ITask, ITaskSolution, RequireAtLeastOne, UAProxy } from "../capmonster";
export declare class ComplexImageTask extends UAProxy {
    constructor(clientKey: string);
    task: (task: RequireAtLeastOne<Omit<IComplexImageTaskRequest, "type">, "imageUrls" | "imagesBase64">) => RequireAtLeastOne<Omit<IComplexImageTaskRequest, "type">, "imageUrls" | "imagesBase64">;
    createWithTask: (task: RequireAtLeastOne<Omit<IComplexImageTaskRequest, "type">, "imageUrls" | "imagesBase64">) => Promise<number>;
    getTaskResult: (taskId: number) => Promise<IComplexImageTaskResponse | null>;
    joinTaskResult: (taskId: number, timeout?: number) => Promise<IComplexImageTaskRequest>;
    prepareImageFromLocal: (path: string) => Promise<string>;
}
interface IComplexImageTaskRequest extends ITask {
    type: "ComplexImageTask";
    class: "recaptcha" | "hcaptcha";
    imageUrls?: string[];
    imagesBase64?: string[];
    metadata: RequireAtLeastOne<MetaData, "Task" | "TaskDefinition">;
}
interface IComplexImageTaskResponse extends ITaskSolution {
    answer: boolean[];
}
interface MetaData {
    Grid?: string | "4x4" | "3x3" | "1x1";
    TaskDefinition?: string;
    Task?: string;
}
export {};
//# sourceMappingURL=complex_image.d.ts.map