"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageToTextTask = void 0;
const capmonster_1 = require("../capmonster");
class ImageToTextTask extends capmonster_1.CapmonsterClient {
    constructor(clientKey) {
        super(clientKey);
    }
    createTask = async (image, module, recognizingThreshold, _case, numeric, math) => {
        console.warn("This function is deprecated, use `task` & `createWithTask` to avoid errors in future versions");
        const data = {
            type: "ImageToTextTask",
            body: image,
            CapMonsterModule: module,
            recognizingThreshold,
            Case: _case,
            numeric,
            math,
        };
        return await this._createTask(data);
    };
    task = (task) => task;
    createWithTask = async (task) => {
        return await this._createTask({
            type: "ImageToTextTask",
            ...task,
        });
    };
    getTaskResult = async (taskId) => this._getTaskResult(taskId);
    joinTaskResult = async (taskId, timeout) => this._joinTaskResult(taskId, timeout);
    prepareImageFromLocal = async (path) => Promise.resolve().then(() => __importStar(require("fs"))).then((fs) => fs.readFileSync(path, "base64"));
    prepareImageFromLink = (url) => fetch(url)
        .then((res) => res.arrayBuffer())
        .then((buffer) => Buffer.from(buffer).toString("base64"));
}
exports.ImageToTextTask = ImageToTextTask;
