import { CapmonsterClient, ITask, ITaskSolution } from "../capmonster";
export declare class RecaptchaV3Task extends CapmonsterClient {
    constructor(clientKey: string);
    createTask: (websiteUrl: string, websiteKey: string, minimumScore?: number, pageAction?: string, noCache?: boolean) => Promise<number>;
    task: (task: Omit<IRecaptchaV3TaskRequest, "type">) => Omit<IRecaptchaV3TaskRequest, "type">;
    createWithTask: (task: Omit<IRecaptchaV3TaskRequest, "type">) => Promise<number>;
    getTaskResult: (taskId: number) => Promise<IRecaptchaV3TaskResponse | null>;
    joinTaskResult: (taskId: number, timeout?: number) => Promise<IRecaptchaV3TaskResponse>;
    private checkScore;
}
interface IRecaptchaV3TaskRequest extends ITask {
    type: "RecaptchaV3TaskProxyless";
    websiteURL: string;
    websiteKey: string;
    minScore?: number;
    pageAction?: string;
    noCache?: boolean;
}
interface IRecaptchaV3TaskResponse extends ITaskSolution {
    gRecaptchaResponse: string;
}
export {};
//# sourceMappingURL=recaptcha_v3.d.ts.map