import { UAProxy, ITask, ITaskSolution } from "../capmonster";
export declare class RecaptchaV2EnterpriseTask extends UAProxy {
    constructor(clientKey: string);
    createTask: (websiteUrl: string, websiteKey: string, cookies?: string | Array<unknown> | object, enterprisePayload?: string, apiDomain?: string, noCache?: boolean) => Promise<number>;
    task: (task: Omit<IRecaptchaV2ETaskRequest, "type">) => Omit<IRecaptchaV2ETaskRequest, "type">;
    createWithTask: (task: Omit<IRecaptchaV2ETaskRequest, "type">) => Promise<number>;
    getTaskResult: (taskId: number) => Promise<IRecaptchaV2ETaskResponse | null>;
    joinTaskResult: (taskId: number, timeout?: number) => Promise<IRecaptchaV2ETaskResponse>;
}
interface IRecaptchaV2ETaskRequest extends ITask {
    type: "RecaptchaV2EnterpriseTaskProxyless" | "RecaptchaV2EnterpriseTask";
    websiteURL: string;
    websiteKey: string;
    enterprisePayload?: string;
    apiDomain?: string;
    cookies?: string;
    noCache?: boolean;
}
interface IRecaptchaV2ETaskResponse extends ITaskSolution {
    gRecaptchaResponse: string;
}
export {};
//# sourceMappingURL=recaptcha_v2_enterprise.d.ts.map